#if MC68000
#include	<limits.h>
!
! Assembler file generated by c68 4.0, modified by Richard Kettlewell
!
! (c) 1992 Richard Kettlewell
!
	.sect	.text
	.sect	.rom
	.sect	.data
	.sect	.bss
	.sect	.data
	.align	2
crctable:
	.data2	0,4129,8258,12387,16516,20645,24774,28903
	.data2	33032,37161,41290,45419,49548,53677,57806,61935
	.data2	4657,528,12915,8786,21173,17044,29431,25302
	.data2	37689,33560,45947,41818,54205,50076,62463,58334
	.data2	9314,13379,1056,5121,25830,29895,17572,21637
	.data2	42346,46411,34088,38153,58862,62927,50604,54669
	.data2	13907,9842,5649,1584,30423,26358,22165,18100
	.data2	46939,42874,38681,34616,63455,59390,55197,51132
	.data2	18628,22757,26758,30887,2112,6241,10242,14371
	.data2	51660,55789,59790,63919,35144,39273,43274,47403
	.data2	23285,19156,31415,27286,6769,2640,14899,10770
	.data2	56317,52188,64447,60318,39801,35672,47931,43802
	.data2	27814,31879,19684,23749,11298,15363,3168,7233
	.data2	60846,64911,52716,56781,44330,48395,36200,40265
	.data2	32407,28342,24277,20212,15891,11826,7761,3696
	.data2	65439,61374,57309,53244,48923,44858,40793,36728
	.data2	37256,33193,45514,41451,53516,49453,61774,57711
	.data2	4224,161,12482,8419,20484,16421,28742,24679
	.data2	33721,37784,41979,46042,49981,54044,58239,62302
	.data2	689,4752,8947,13010,16949,21012,25207,29270
	.data2	46570,42443,38312,34185,62830,58703,54572,50445
	.data2	13538,9411,5280,1153,29798,25671,21540,17413
	.data2	42971,47098,34713,38840,59231,63358,50973,55100
	.data2	9939,14066,1681,5808,26199,30326,17941,22068
	.data2	55628,51565,63758,59695,39368,35305,47498,43435
	.data2	22596,18533,30726,26663,6336,2273,14466,10403
	.data2	52093,56156,60223,64286,35833,39896,43963,48026
	.data2	19061,23124,27191,31254,2801,6864,10931,14994
	.data2	64814,60687,56684,52557,48554,44427,40424,36297
	.data2	31782,27655,23652,19525,15522,11395,7392,3265
	.data2	61215,65342,53085,57212,44955,49082,36825,40952
	.data2	28183,32310,20053,24180,11923,16050,3793,7920

	.sect	.bss
	.align	2

crc_value:
	.space	2

	.sect	.text
	.align	2

crc_init:
	clr.w	crc_value	; Initialise CRC
	rts

	.align	2

crc_byte:
	lea	crctable,a0
	lea	crc_value,a1
	moveq	#0,d0
	move.b	(a1),d0		; D0 = crc >> 8
#if UINT_MAX == 65535
	move.b	4+1(a7),d1	; D1 = byte
#else
	move.b	4+3(a7),d1	; D1 = byte
#endif
	eor.b	d1,d0		; D1 = (crc >> 8) XOR byte
	add.w	d0,d0
	move.w	0(a0,d0.w),d0	; D0 = table[(crc>>8) XOR byte]
	move.b	1(a1),d1	; D1 = crc (bits 0 to 7)
	lsl.w	#8,d1		; D1 = crc << 8
	eor.w	d1,d0		; D0 = table[(crc>>8) XOR byte] XOR (crc<<8)
	move.w	d0,(a1)		; Update count
	rts

	.align	2

crc_total:
	moveq	#0,d0		; Return in 32 bits
	move.w	crc_value,d0	; Find result
	rts

	.define crc_init
	.define crc_byte
	.define crc_total

#else
/*
 * Calculate CRC
 *
 * (c) 1992 Richard Kettlewell
 */
static unsigned short crctable[256]={
	0, 4129, 8258, 12387, 16516, 20645, 24774, 28903,
	33032, 37161, 41290, 45419, 49548, 53677, 57806, 61935,
	4657, 528, 12915, 8786, 21173, 17044, 29431, 25302,
	37689, 33560, 45947, 41818, 54205, 50076, 62463, 58334,
	9314, 13379, 1056, 5121, 25830, 29895, 17572, 21637,
	42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669,
	13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100,
	46939, 42874, 38681, 34616, 63455, 59390, 55197, 51132,
	18628, 22757, 26758, 30887, 2112, 6241, 10242, 14371,
	51660, 55789, 59790, 63919, 35144, 39273, 43274, 47403,
	23285, 19156, 31415, 27286, 6769, 2640, 14899, 10770,
	56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802,
	27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233,
	60846, 64911, 52716, 56781, 44330, 48395, 36200, 40265,
	32407, 28342, 24277, 20212, 15891, 11826, 7761, 3696,
	65439, 61374, 57309, 53244, 48923, 44858, 40793, 36728,
	37256, 33193, 45514, 41451, 53516, 49453, 61774, 57711,
	4224, 161, 12482, 8419, 20484, 16421, 28742, 24679,
	33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302,
	689, 4752, 8947, 13010, 16949, 21012, 25207, 29270,
	46570, 42443, 38312, 34185, 62830, 58703, 54572, 50445,
	13538, 9411, 5280, 1153, 29798, 25671, 21540, 17413,
	42971, 47098, 34713, 38840, 59231, 63358, 50973, 55100,
	9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068,
	55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435,
	22596, 18533, 30726, 26663, 6336, 2273, 14466, 10403,
	52093, 56156, 60223, 64286, 35833, 39896, 43963, 48026,
	19061, 23124, 27191, 31254, 2801, 6864, 10931, 14994,
	64814, 60687, 56684, 52557, 48554, 44427, 40424, 36297,
	31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265,
	61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952,
	28183, 32310, 20053, 24180, 11923, 16050, 3793, 7920,
};

static unsigned short crc_value;

void crc_init(void)
{
	crc_value = 0;
}

void crc_byte(int byte)
{
	crc_value = crctable[(crc_value >> 8) ^ byte] ^ (crc_value << 8);
}

int crc_total(void)
{
	return crc_value;
}
#endif
